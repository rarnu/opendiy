{$I define.inc}

{$IFDEF EXECUTABLE}
program opendiy;
{$ELSE}
library opendiy;
{$ENDIF}

{$mode objfpc}{$H+}

uses
  {$IFNDEF WINDOWS}
  cthreads,
  {$ENDIF}
  Interfaces, Classes, sysutils, carddata, carddrawer, sourceloader, fontloader,
  textdrawer, textliner, cardzip, jni2, jsonparser, fpjson, jsonscanner;

procedure newYGOProject(outPath: string);
var
  cd: TCardData;
  fc: TFontConfig;
begin
  if (DirectoryExists(outPath)) or (FileExists(outPath)) then begin
    WriteLn('Path already exists.');
    Exit;
  end;

  ForceDirectories(outPath);
  if (not outPath.EndsWith(DirectorySeparator)) then outPath += DirectorySeparator;
  cd := TCardData.Create;
  cd.toJsonFile(outPath + 'card.data');
  cd.Free;
  fc := TFontConfig.Create(outPath + 'card.cfg');
  fc.saveInit();
  fc.Free;
  with TStringList.Create do begin
    Text:= 'Put card image here named ".origin.png" and an image thumb named ".card.png". Be ware the name of files are starts with a dot.';
    SaveToFile(outPath + 'comment.txt');
    Free;
  end;
end;

procedure packYGOProject(projPath: string; outFile: string);
var
  dataFile: string;
  parser: TJSONParser = nil;
  json: TJSONObject = nil;
  jsonstring: string = '';
begin
  if (not projPath.EndsWith(DirectorySeparator)) then projPath += DirectorySeparator;
  dataFile:= projPath + 'card.data';
  if (not FileExists(dataFile)) then begin
    WriteLn('Data file not exists.');
    Exit;
  end;
  with TStringList.Create do begin
    LoadFromFile(dataFile);
    jsonstring:= Text;
    Free;
  end;
  try
    try
      parser := TJSONParser.Create(jsonstring, [joUTF8]);
      json := TJSONObject(parser.Parse);
      if (json.Strings['cardname'] = '') then begin
        WriteLn('Card name is empty, cannot pack card.');
      end else begin
        TCardZip.projectToYgo(projPath, outFile);
      end;
    except
      on e: Exception do begin
        WriteLn('Data file error.');
      end;
    end;
  finally
    if (parser <> nil) then parser.Free;
    if (json <> nil) then json.Free;
  end;
end;

procedure drawYGOCard(modulePath: string; ygoPath: string; outPath: string; tmpPath: string);
var
  src: TSources;
  info: TCardData;
  font: TFontLoader;
  cfgPath: string;
begin
  if (not DirectoryExists(modulePath)) or (not FileExists(ygoPath)) or (outPath.Trim = '') then begin
    Exit;
  end;
  if (not DirectoryExists(tmpPath)) then ForceDirectories(tmpPath);
  if (not tmpPath.EndsWith(DirectorySeparator)) then tmpPath += DirectorySeparator;
  src := TSources.Create(modulePath);
  info := TCardZip.ygoToCardData(ygoPath, tmpPath);
  info.CardImage:= tmpPath + '.origin.png';
  if (not outPath.EndsWith(DirectorySeparator)) then outPath += DirectorySeparator;
  outPath += info.CardName + '.png';
  cfgPath:= tmpPath + 'card.cfg';
  if (not FileExists(cfgPath)) then cfgPath:= '';
  font := TFontLoader.Create(cfgPath, info.IsCommented);
  TCardDrawer.drawCard(info, src, font, outPath);
  font.Free;
  info.Free;
  src.Free;
end;

{$IFDEF EXECUTABLE}

procedure writeHelp();
begin
  WriteLn('Usage: opendiy <command> <parameters>');
  WriteLn('');
  WriteLn('    command: create / pack / draw');
  WriteLn('        [create]: opendiy create <project path>');
  WriteLn('        [pack]:   opendiy pack <project path> <ygo path>');
  WriteLn('        [draw]:   opendiy draw <module path> <ygo path> <output path>');
  WriteLn('');
  WriteLn('    samples:');
  WriteLn('        opendiy create ~/Desktop/newcard');
  WriteLn('        opendiy pack ~/Desktop/newcard ~/Desktop/newcard.ygo');
  WriteLn('        opendiy draw module/ ~/Desktop/newcard.ygo ~/Desktop/');
  WriteLn('');
end;

var
  cmd: string;
  modulePath: string;
  ygoPath: string;
  outPath: string;

  outNewCardProj: string;
  outYgoFile: string;
begin
  if (ParamCount = 0) then begin
    writeHelp();
    Exit;
  end;
  if (not TFontLoader.validate()) then begin
    WriteLn('Fonts not installed. Install them first please.');
    writeHelp();
    Exit;
  end;
  cmd := ParamStr(1);
  if (cmd = 'create') then begin
    if (ParamCount <> 2) then begin
      writeHelp();
      Exit;
    end;
    outNewCardProj:= ParamStr(2);
    newYGOProject(outNewCardProj);
  end else if (cmd = 'pack') then begin
    if (ParamCount <> 3) then begin
      writeHelp();
      Exit;
    end;
    outNewCardProj:= ParamStr(2);
    outYgoFile:= ParamStr(3);
    packYGOProject(outNewCardProj, outYgoFile);
  end else if (cmd = 'draw') then begin
    if (ParamCount <> 4) then begin
      writeHelp();
      Exit;
    end;
    modulePath:= ParamStr(2);
    ygoPath:= ParamStr(3);
    outPath:= ParamStr(4);
    drawYGOCard(modulePath, ygoPath, outPath, ExtractFilePath(ParamStr(0)) + '.tmp');
  end else begin
    writeHelp();
  end;
end.

{$ELSE}

procedure newProject(aoutPath: PChar); cdecl;
var
  outPath: string;
begin
  outPath:= string(aoutPath);
  newYGOProject(outPath);
end;

procedure packProject(aprojPath: PChar; aoutFile: PChar); cdecl;
var
  projPath: string;
  outFile: string;
begin
  projPath:= string(aprojPath);
  outFile:= string(aoutFile);
  packYGOProject(projPath, outFile);
end;

procedure drawCard(amodulePath: PChar; aygoPath: PChar; aoutPath: PChar; atmpPath: PChar); cdecl;
var
  tmpPath: string;
  modulePath: string;
  ygoPath: string;
  outPath: string;
begin
  tmpPath:= string(atmpPath);
  modulePath:= string(amodulePath);
  ygoPath:= string(aygoPath);
  outPath:= string(aoutPath);
  drawYGOCard(modulePath, ygoPath, outPath, tmpPath);
end;

procedure Java_com_rarnu_opendiy_OpenDIY_newProject(env: PJNIEnv; obj: jobject; aoutPath: jstring); cdecl;
var
  outPath: string;
begin
  outPath:= TJNIEnv.JStringToString(env, aoutPath);
  newYGOProject(outPath);
end;

procedure Java_com_rarnu_opendiy_OpenDIY_packProject(env: PJNIEnv; obj: jobject; aprojPath: jstring; aoutFile: jstring); cdecl;
var
  projPath: string;
  outFile: string;
begin
  projPath:= string(aprojPath);
  outFile:= string(aoutFile);
  packYGOProject(projPath, outFile);
end;

procedure Java_com_rarnu_opendiy_OpenDIY_drawCard(env: PJNIEnv; obj: jobject; amodulePath: jstring; aygoPath: jstring; aoutPath:jstring; atmpPath: jstring); cdecl;
var
  tmpPath: string;
  modulePath: string;
  ygoPath: string;
  outPath: string;
begin
  tmpPath:= TJNIEnv.JStringToString(env, atmpPath);
  modulePath:= TJNIEnv.JStringToString(env, amodulePath);
  ygoPath:= TJNIEnv.JStringToString(env, aygoPath);
  outPath:= TJNIEnv.JStringToString(env, aoutPath);
  drawYGOCard(modulePath, ygoPath, outPath, tmpPath);
end;

exports
  newProject,
  packProject,
  drawCard,
  Java_com_rarnu_opendiy_OpenDIY_newProject,
  Java_com_rarnu_opendiy_OpenDIY_packProject,
  Java_com_rarnu_opendiy_OpenDIY_drawCard;

begin

end.

{$ENDIF}

